---
import { type Language, CATEGORY_MAP } from '@lib/language'
import { Post } from '@lib/posts'
import { format } from 'date-fns'
import PostMetaWidget from '@components/fragments/PostMetaWidget.astro'
import TableOfContent from '@components/fragments/TableOfContent.astro'
import { replaceInvalidUrlChars } from '@lib/utils'
import type { MarkdownHeading } from 'astro'
import type { Page } from '@lib/pages'

type Props = {
  language: Language
  post?: Post
  page?: Page
  headings: MarkdownHeading[]
  isShowingMultiPosts: boolean
}

const { language, post, page, headings, isShowingMultiPosts } = Astro.props
const __ = language.getTranslation
---

<div class="post-info-wrap">
  {
    post !== undefined && (
      <div class="post-info">
        {
          /* Filter out posts before UTC & handle timezone which may be 12h off */
          post.date.valueOf() > 43200000 && (
            <PostMetaWidget
              fontAwesomeClass="fas fa-clock"
              label={format(post.date, 'MM-dd')}
            >
              {__('date')}
              <span class="badge badge-tag">
                {format(post.date, 'yyyy-MM-dd HH:mm')}
              </span>
            </PostMetaWidget>
          )
        }
        {post.category !== undefined && (
          <PostMetaWidget
            fontAwesomeClass="fas fa-file-alt"
            label={post.category}
          >
            {__('category')}{' '}
            <a
              class="badge badge-tag"
              href={`${language.getSegment()}/category/${replaceInvalidUrlChars(CATEGORY_MAP[post.category]!)}`}
            >
              {post.category}
            </a>
          </PostMetaWidget>
        )}
        {post.tags.length > 0 && (
          <PostMetaWidget
            fontAwesomeClass="fas fa-tag"
            label={`${post.tags.length} ${__('n_tags')}`}
          >
            {__('tags')}{' '}
            {post.tags.map(tag => (
              <>
                <a
                  class="badge badge-tag"
                  href={`${language.getSegment()}/tag/${replaceInvalidUrlChars(tag)}`}
                >
                  {tag}
                </a>{' '}
              </>
            ))}
          </PostMetaWidget>
        )}
        {!isShowingMultiPosts && headings.length > 0 && (
          <PostMetaWidget
            fontAwesomeClass="fas fa-list"
            label={__('table_of_contents')}
          >
            <TableOfContent headings={headings} />
          </PostMetaWidget>
        )}
      </div>
    )
  }
  {
    page !== undefined && (
      <div class="post-info">
        {!isShowingMultiPosts && headings.length > 0 && (
          <PostMetaWidget
            fontAwesomeClass="fas fa-list"
            label={__('table_of_contents')}
          >
            <TableOfContent headings={headings} />
          </PostMetaWidget>
        )}
      </div>
    )
  }
</div>

<style lang="scss">
  @import '../../assets/sass/bootstrap_common.scss';

  .post-info-wrap {
    flex: 0 0 2.5em;
    background-color: var(--lt-component-bg-emphasis);
  }

  @include media-breakpoint-up(md) {
    .post-info {
      position: sticky;
      top: 0;
    }
  }

  @include media-breakpoint-down(md) {
    .post-info {
      position: absolute;
    }
  }
</style>
