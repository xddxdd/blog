---
import { SITE_TITLE } from '../consts'
import { type Language, LANGUAGES } from '../lib/language'
import type { NavigationItem } from '../lib/navigation'

type Props = {
  language: Language
  navBarItems: NavigationItem[]
}

const { language, navBarItems } = Astro.props
const __ = language.getTranslation
const { pathname } = Astro.url
---

<nav class="lantian navbar navbar-expand-lg">
  <div class="container-fluid">
    <a class="navbar-brand" href={language.getSegment() + '/'}>{SITE_TITLE}</a>
    <button
      class="navbar-toggler"
      type="button"
      data-bs-toggle="collapse"
      data-bs-target="#lantian-navbar"
      aria-controls="lantian-navbar"
      aria-expanded="false"
      aria-label="Toggle navigation"
    >
      <span class="navbar-toggler-icon"></span>
    </button>
    <div class="collapse navbar-collapse" id="lantian-navbar">
      <ul class="navbar-nav">
        {
          navBarItems.map(item => (
            <li class="nav-item d-none d-lg-block">
              <a
                class={`nav-link ${pathname == item.path ? 'active' : ''}`}
                href={item.path}
              >
                {item.name}
              </a>
            </li>
          ))
        }
        {
          navBarItems.length > 0 && (
            <li class="nav-item dropdown d-block d-lg-none">
              <a
                href="#"
                class="nav-link dropdown-toggle"
                id="pages-dropdown"
                role="button"
                data-bs-toggle="dropdown"
                aria-expanded="false"
              >
                <i class="fas fa-fw fa-file" /> {__('page')}{' '}
                <span class="caret" />
              </a>
              <ul class="dropdown-menu" aria-labelledby="pages-dropdown">
                {navBarItems.map(item => (
                  <li>
                    <a
                      class={`dropdown-item ${pathname == item.path ? 'active' : ''}`}
                      href={item.path}
                    >
                      {item.name}
                    </a>
                  </li>
                ))}
              </ul>
            </li>
          )
        }
      </ul>
      <ul class="navbar-nav ms-auto">
        <li class="nav-item dropdown">
          <a
            href="#"
            class="nav-link dropdown-toggle"
            id="languages-dropdown"
            role="button"
            data-bs-toggle="dropdown"
            aria-expanded="false"
          >
            <i class="fas fa-fw fa-language"></i>
            {__('language')}
            <span class="caret"></span>
          </a>
          <ul class="dropdown-menu" aria-labelledby="languages-dropdown">
            {
              Object.entries(LANGUAGES).map(([_, newLanguage]) => {
                const canonicalPath = language.getCanonicalPath(
                  pathname,
                  newLanguage
                )
                return (
                  <li>
                    <a
                      class={`dropdown-item ${pathname == canonicalPath ? 'active' : ''}`}
                      href={canonicalPath}
                    >
                      <span class={`flag-icon ${newLanguage.getFlagIcon()}`} />
                      {newLanguage.getDisplayName()}
                    </a>
                  </li>
                )
              })
            }
            <li><hr class="dropdown-divider" /></li>
            <li>
              <a class="dropdown-item disabled" href="#"
                >Not all pages have translations.</a
              >
            </li>
            <li>
              <a class="dropdown-item disabled" href="#"
                >You may see 404 - this is normal.</a
              >
            </li>
          </ul>
        </li>

        <li class="nav-item dropdown">
          <a
            href="#"
            class="nav-link dropdown-toggle"
            id="color-scheme-dropdown"
            role="button"
            data-bs-toggle="dropdown"
            aria-expanded="false"
          >
            <i class="fas fa-fw fa-adjust"></i>
            {__('color_scheme')}
          </a>
          <ul class="dropdown-menu" aria-labelledby="color-scheme-dropdown">
            <li>
              <a id="color-scheme-auto" class="dropdown-item" href="#"
                ><i class="fas fa-fw fa-adjust"></i>
                {__('color_scheme_auto')}
              </a>
            </li>
            <li><hr class="dropdown-divider" /></li>
            <li>
              <a id="color-scheme-light" class="dropdown-item" href="#"
                ><i class="fas fa-fw fa-sun"></i>
                {__('color_scheme_light')}</a
              >
            </li>
            <li>
              <a id="color-scheme-dark" class="dropdown-item" href="#"
                ><i class="fas fa-fw fa-moon"></i>
                {__('color_scheme_dark')}</a
              >
            </li>
          </ul>
        </li>
      </ul>
    </div>
  </div>
</nav>

<script>
  /* https://blog.skk.moe/post/hello-darkmode-my-old-friend/ */

  const darkModeStorageKey = 'user-color-scheme' // 作为 localStorage 的 key
  const rootElementDarkModeAttributeName = 'data-user-color-scheme'

  const setLS = (k: string, v: string) => {
    try {
      localStorage.setItem(k, v)
    } catch (e) {}
  }

  const getLS = (k: string) => {
    try {
      return localStorage.getItem(k)
    } catch (e) {
      return null // 与 localStorage 中没有找到对应 key 的行为一致
    }
  }

  const applyCustomDarkModeSettings = (_mode: string | null) => {
    const validColorModeKeys = {
      dark: true,
      light: true,
      auto: true,
    }

    const mode: string =
      _mode === null || !Object.keys(validColorModeKeys).includes(_mode)
        ? 'auto'
        : _mode
    setLS(darkModeStorageKey, mode)

    for (const key in validColorModeKeys) {
      const elem = document.getElementById('color-scheme-' + key)!
      if (key == mode) {
        elem.classList.add('active')
      } else {
        elem.classList.remove('active')
      }
    }

    if (mode != 'auto') {
      document.documentElement.setAttribute(
        rootElementDarkModeAttributeName,
        mode
      )
    } else {
      document.documentElement.removeAttribute(rootElementDarkModeAttributeName)
    }
  }

  // 当页面加载时，将显示模式设置为 localStorage 中自定义的值（如果有的话）
  applyCustomDarkModeSettings(getLS(darkModeStorageKey))

  document
    .getElementById('color-scheme-auto')!
    .addEventListener('click', () => applyCustomDarkModeSettings('auto'))
  document
    .getElementById('color-scheme-light')!
    .addEventListener('click', () => applyCustomDarkModeSettings('light'))
  document
    .getElementById('color-scheme-dark')!
    .addEventListener('click', () => applyCustomDarkModeSettings('dark'))
</script>

<style lang="scss">
  @import '../assets/sass/bootstrap_common.scss';
  nav {
    padding: 0;
    border-left: 5px solid var(--lt-primary);
    .container-fluid {
      padding: 0;
    }

    .navbar-brand {
      margin: 0;
      padding: 1rem;
      font-weight: 700;
    }

    .navbar-nav {
      a.active {
        background-color: var(--lt-selected-bg);
        color: var(--lt-selected);
      }

      @include media-breakpoint-down(lg) {
        .nav-item {
          margin: 0 1rem;
        }
      }
    }

    .navbar-brand,
    .nav-link {
      color: var(--lt-primary);
      &:hover {
        color: var(--lt-primary-hover);
      }
    }

    .navbar-spacer {
      margin-right: auto;
    }

    .navbar-toggler-icon {
      background-image: escape-svg($navbar-light-toggler-icon-bg);
    }

    #elderclock-plus1s {
      opacity: 0;
      position: absolute;
      animation: elderclock-plus1s 1s 1;
    }

    border-bottom: 1px solid var(--lt-border);
    background-color: var(--lt-component-bg-emphasis);

    .dropdown-menu,
    .dropdown-menu a {
      color: var(--lt-page-text);
      background-color: var(--lt-component-bg);
    }
  }
</style>
